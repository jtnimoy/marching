(function(){p5.prototype.marchingSquares=function(data,thresh){if(thresh==null)thresh=0.0;let vecs=[];function apply(x,y,i){i[0]=0.5+i[0]+x;i[1]=0.5+i[1]+y;i[2]=0.5+i[2]+x;i[3]=0.5+i[3]+y;return i}
for(let y=0;y<data.length-1;y++){for(let x=0;x<data[y].length-1;x++){if(data[y][x]>thresh&&data[y][x+1]>thresh&&data[y+1][x]>thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0,0,0,1]));vecs.push(apply(x,y,[0,1,1,1]));vecs.push(apply(x,y,[1,1,1,0]));vecs.push(apply(x,y,[1,0,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]>thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0,0,0,0.5]));vecs.push(apply(x,y,[0,0.5,0.5,1]));vecs.push(apply(x,y,[0.5,1,1,1]));vecs.push(apply(x,y,[1,1,1,0]));vecs.push(apply(x,y,[1,0,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]>thresh&&data[y+1][x]>thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0,0,0,1]));vecs.push(apply(x,y,[0,1,0.5,1]));vecs.push(apply(x,y,[0.5,1,1,0.5]));vecs.push(apply(x,y,[1,0.5,1,0]));vecs.push(apply(x,y,[1,0,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]>thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0,0,1,0]));vecs.push(apply(x,y,[1,0,1,0.5]));vecs.push(apply(x,y,[1,0.5,0,0.5]));vecs.push(apply(x,y,[0,0.5,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]<=thresh&&data[y+1][x]>thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0,0,0,1]));vecs.push(apply(x,y,[0,1,1,1]));vecs.push(apply(x,y,[1,1,1,0.5]));vecs.push(apply(x,y,[1,0.5,0.5,0]));vecs.push(apply(x,y,[0.5,0,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]<=thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0,0,0,0.5]));vecs.push(apply(x,y,[0,0.5,0.5,1]));vecs.push(apply(x,y,[0.5,1,1,1]));vecs.push(apply(x,y,[1,1,1,0.5]));vecs.push(apply(x,y,[1,0.5,0.5,0]));vecs.push(apply(x,y,[0.5,0,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]<=thresh&&data[y+1][x]>thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0,0,0.5,0]));vecs.push(apply(x,y,[0.5,0,0.5,1]));vecs.push(apply(x,y,[0.5,1,0,1]));vecs.push(apply(x,y,[0,1,0,0]))}
else if(data[y][x]>thresh&&data[y][x+1]<=thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0,0,0.5,0]));vecs.push(apply(x,y,[0.5,0,0,0.5]));vecs.push(apply(x,y,[0,0.5,0,0]))}
else if(data[y][x]<=thresh&&data[y][x+1]>thresh&&data[y+1][x]>thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0.5,0,1,0]));vecs.push(apply(x,y,[1,0,1,1]));vecs.push(apply(x,y,[1,1,0,1]));vecs.push(apply(x,y,[0,1,0,0.5]));vecs.push(apply(x,y,[0,0.5,0.5,0]))}
else if(data[y][x]<=thresh&&data[y][x+1]>thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0.5,0,1,0]));vecs.push(apply(x,y,[1,0,1,1]));vecs.push(apply(x,y,[1,1,0.5,1]));vecs.push(apply(x,y,[0.5,1,0.5,0]))}
else if(data[y][x]<=thresh&&data[y][x+1]>thresh&&data[y+1][x]>thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0.5,0,1,0]));vecs.push(apply(x,y,[1,0,1,0.5]));vecs.push(apply(x,y,[1,0.5,0.5,1]));vecs.push(apply(x,y,[0.5,1,0,1]));vecs.push(apply(x,y,[0,1,0,0.5]));vecs.push(apply(x,y,[0,0.5,0.5,0]))}
else if(data[y][x]<=thresh&&data[y][x+1]>thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0.5,0,1,0]));vecs.push(apply(x,y,[1,0,1,0.5]));vecs.push(apply(x,y,[1,0.5,0.5,0]))}
else if(data[y][x]<=thresh&&data[y][x+1]<=thresh&&data[y+1][x]>thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[0,0.5,1,0.5]));vecs.push(apply(x,y,[1,0.5,1,1]));vecs.push(apply(x,y,[1,1,0,1]));vecs.push(apply(x,y,[0,1,0,0.5]))}
else if(data[y][x]<=thresh&&data[y][x+1]<=thresh&&data[y+1][x]<=thresh&&data[y+1][x+1]>thresh){vecs.push(apply(x,y,[1,0.5,1,1]));vecs.push(apply(x,y,[1,1,0.5,1]));vecs.push(apply(x,y,[0.5,1,1,0.5]))}
else if(data[y][x]<=thresh&&data[y][x+1]<=thresh&&data[y+1][x]>thresh&&data[y+1][x+1]<=thresh){vecs.push(apply(x,y,[0,0.5,0,1]));vecs.push(apply(x,y,[0,1,0.5,1]));vecs.push(apply(x,y,[0.5,1,0,0.5]))}}}
let removables=[];vecs.map(function(i){vecs.map(function(j){function cmp(a,b){return(a[0]==b[0]&&a[1]==b[1]&&a[2]==b[2]&&a[3]==b[3])||(a[0]==b[2]&&a[1]==b[3]&&a[2]==b[0]&&a[3]==b[1])}
if(i!==j){if(cmp(i,j)){removables.push(i)}}})});removables.map(function(i){vecs.splice(vecs.indexOf(i),1)});return vecs}})()